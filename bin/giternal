#!/usr/bin/env ruby
require "rubygems"
if File.exist?(File.dirname(__FILE__) + '/../lib/giternal.rb')
  $:.unshift(File.dirname(__FILE__) + '/../lib')
end
require 'giternal'
require 'optparse'
require 'ostruct'
require 'term/ansicolor'

available_actions = %w(status update freeze unfreeze)
options = OpenStruct.new
OptionParser.new do |opts|
  opts.banner = "Usage: giternal ACTION [options] [repos]\n\n" +
                "Actions: #{available_actions.join(' ')}\n\n" +
                "Options:"

  # set defaults
  options.verbose = false
  options.coloring = true
  options.config_update = false

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options.verbose = v
  end

  opts.on("-c", "--[no-]coloring", "Ansi color in output") do |c|
    options.coloring = c
  end

  opts.on("-u", "--[no-]config-update", "Rewrite giternal.yml including last commit sha") do |u|
    options.config_update = u
  end

  # no argument, shows at tail.  This will print an options summary.
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end.parse!  # parse and remove options from commandline

action = ARGV.shift
repos = ARGV
unless available_actions.include?(action)
  puts "Usage: giternal (#{available_actions.join(':')}) [options] [repos]\n"
  puts "giternal --help for more information"
  exit 1
end

Giternal::Repository.verbose = options.verbose
if STDOUT.isatty
  Term::ANSIColor::coloring = options.coloring
else
  Term::ANSIColor::coloring = false
end

app = Giternal::App.new(FileUtils.pwd)
app.config_update = options.config_update
app.run(action, repos)
